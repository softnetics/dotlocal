// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/dot-local.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct CreateMappingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var host: String {
    get {return _host ?? String()}
    set {_host = newValue}
  }
  /// Returns true if `host` has been explicitly set.
  public var hasHost: Bool {return self._host != nil}
  /// Clears the value of `host`. Subsequent reads from it will return its default value.
  public mutating func clearHost() {self._host = nil}

  public var pathPrefix: String {
    get {return _pathPrefix ?? String()}
    set {_pathPrefix = newValue}
  }
  /// Returns true if `pathPrefix` has been explicitly set.
  public var hasPathPrefix: Bool {return self._pathPrefix != nil}
  /// Clears the value of `pathPrefix`. Subsequent reads from it will return its default value.
  public mutating func clearPathPrefix() {self._pathPrefix = nil}

  public var target: String {
    get {return _target ?? String()}
    set {_target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  public var hasTarget: Bool {return self._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  public mutating func clearTarget() {self._target = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _host: String? = nil
  fileprivate var _pathPrefix: String? = nil
  fileprivate var _target: String? = nil
}

public struct MappingKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var host: String {
    get {return _host ?? String()}
    set {_host = newValue}
  }
  /// Returns true if `host` has been explicitly set.
  public var hasHost: Bool {return self._host != nil}
  /// Clears the value of `host`. Subsequent reads from it will return its default value.
  public mutating func clearHost() {self._host = nil}

  public var pathPrefix: String {
    get {return _pathPrefix ?? String()}
    set {_pathPrefix = newValue}
  }
  /// Returns true if `pathPrefix` has been explicitly set.
  public var hasPathPrefix: Bool {return self._pathPrefix != nil}
  /// Clears the value of `pathPrefix`. Subsequent reads from it will return its default value.
  public mutating func clearPathPrefix() {self._pathPrefix = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _host: String? = nil
  fileprivate var _pathPrefix: String? = nil
}

public struct Mapping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var host: String {
    get {return _host ?? String()}
    set {_host = newValue}
  }
  /// Returns true if `host` has been explicitly set.
  public var hasHost: Bool {return self._host != nil}
  /// Clears the value of `host`. Subsequent reads from it will return its default value.
  public mutating func clearHost() {self._host = nil}

  public var pathPrefix: String {
    get {return _pathPrefix ?? String()}
    set {_pathPrefix = newValue}
  }
  /// Returns true if `pathPrefix` has been explicitly set.
  public var hasPathPrefix: Bool {return self._pathPrefix != nil}
  /// Clears the value of `pathPrefix`. Subsequent reads from it will return its default value.
  public mutating func clearPathPrefix() {self._pathPrefix = nil}

  public var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var target: String {
    get {return _target ?? String()}
    set {_target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  public var hasTarget: Bool {return self._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  public mutating func clearTarget() {self._target = nil}

  public var expiresAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expiresAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expiresAt = newValue}
  }
  /// Returns true if `expiresAt` has been explicitly set.
  public var hasExpiresAt: Bool {return self._expiresAt != nil}
  /// Clears the value of `expiresAt`. Subsequent reads from it will return its default value.
  public mutating func clearExpiresAt() {self._expiresAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _host: String? = nil
  fileprivate var _pathPrefix: String? = nil
  fileprivate var _id: String? = nil
  fileprivate var _target: String? = nil
  fileprivate var _expiresAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension CreateMappingRequest: @unchecked Sendable {}
extension MappingKey: @unchecked Sendable {}
extension Mapping: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CreateMappingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CreateMappingRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .standard(proto: "path_prefix"),
    3: .same(proto: "target"),
  ]

  public var isInitialized: Bool {
    if self._host == nil {return false}
    if self._pathPrefix == nil {return false}
    if self._target == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._host) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._pathPrefix) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._target) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._host {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._pathPrefix {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._target {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CreateMappingRequest, rhs: CreateMappingRequest) -> Bool {
    if lhs._host != rhs._host {return false}
    if lhs._pathPrefix != rhs._pathPrefix {return false}
    if lhs._target != rhs._target {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MappingKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "MappingKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .standard(proto: "path_prefix"),
  ]

  public var isInitialized: Bool {
    if self._host == nil {return false}
    if self._pathPrefix == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._host) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._pathPrefix) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._host {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._pathPrefix {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: MappingKey, rhs: MappingKey) -> Bool {
    if lhs._host != rhs._host {return false}
    if lhs._pathPrefix != rhs._pathPrefix {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Mapping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Mapping"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .standard(proto: "path_prefix"),
    3: .same(proto: "id"),
    4: .same(proto: "target"),
    5: .standard(proto: "expires_at"),
  ]

  public var isInitialized: Bool {
    if self._host == nil {return false}
    if self._pathPrefix == nil {return false}
    if self._id == nil {return false}
    if self._target == nil {return false}
    if self._expiresAt == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._host) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._pathPrefix) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._target) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._expiresAt) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._host {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._pathPrefix {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._target {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._expiresAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Mapping, rhs: Mapping) -> Bool {
    if lhs._host != rhs._host {return false}
    if lhs._pathPrefix != rhs._pathPrefix {return false}
    if lhs._id != rhs._id {return false}
    if lhs._target != rhs._target {return false}
    if lhs._expiresAt != rhs._expiresAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
